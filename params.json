{"name":"rlist","tagline":"A set of tools for working with list objects","body":"\r\n\r\n# rlist\r\n\r\n[![Build Status](https://travis-ci.org/renkun-ken/rlist.png?branch=master)](https://travis-ci.org/renkun-ken/rlist)\r\n\r\nrlist is a set of tools for working with list objects. Its goal is to make it easier to work with lists by providing a wide range of functions on non-tabular data stored in them.\r\n\r\nCurrently, this package supports list filtering, mapping, grouping, sorting, updating, searching, file input/output, and many other functions. It implements collection pipeline and strongly recommends functional programming style in list operations.\r\n\r\n[Release notes](https://github.com/renkun-ken/rlist/releases)\r\n\r\n## Installation\r\n\r\nYou can install the latest released version from [CRAN](http://cran.r-project.org/web/packages/rlist/) with\r\n\r\n```r\r\ninstall.packages(\"rlist\")\r\n```\r\n\r\nor the latest development version from GitHub with\r\n\r\n```r\r\ndevtools::install_github(\"rlist\",\"renkun-ken\")\r\n```\r\n\r\n## Getting started\r\n\r\nThe package provides a wide range of high-level functions to work with list objects.\r\n\r\nSuppose we have a list of developers, each of whom has a name, age, a few interests, a list of programming languages they use and the number of years they have been using them.\r\n\r\n\r\n```r\r\nlibrary(rlist)\r\ndevs <- \r\n  list(\r\n    p1=list(name=\"Ken\",age=24,\r\n      interest=c(\"reading\",\"music\",\"movies\"),\r\n      lang=list(r=2,csharp=4,python=3)),\r\n    p2=list(name=\"James\",age=25,\r\n      interest=c(\"sports\",\"music\"),\r\n      lang=list(r=3,java=2,cpp=5)),\r\n    p3=list(name=\"Penny\",age=24,\r\n      interest=c(\"movies\",\"reading\"),\r\n      lang=list(r=1,cpp=4,python=2)))\r\n```\r\n\r\nThis type of data is non-relational since it does not well fit the shape of a data table yet it can be easily stored in JSON or YAML format. In R, list object is powerful enough to represent a wide range of non-relational datasets like this. This package provides a wide range of functions to query this type of data.\r\n\r\n## Examples\r\n\r\nFilter those who like music and has been using R for more than 3 years.\r\n\r\n\r\n```r\r\nsubset1 <- list.filter(devs, \"music\" %in% interest & lang$r >= 3)\r\nstr(subset1)\r\n```\r\n\r\n```\r\nList of 1\r\n $ p2:List of 4\r\n  ..$ name    : chr \"James\"\r\n  ..$ age     : num 25\r\n  ..$ interest: chr [1:2] \"sports\" \"music\"\r\n  ..$ lang    :List of 3\r\n  .. ..$ r   : num 3\r\n  .. ..$ java: num 2\r\n  .. ..$ cpp : num 5\r\n```\r\n\r\nSelect their names and ages.\r\n\r\n\r\n```r\r\nsubset2 <- list.select(devs, name, age)\r\nstr(subset2)\r\n```\r\n\r\n```\r\nList of 3\r\n $ p1:List of 2\r\n  ..$ name: chr \"Ken\"\r\n  ..$ age : num 24\r\n $ p2:List of 2\r\n  ..$ name: chr \"James\"\r\n  ..$ age : num 25\r\n $ p3:List of 2\r\n  ..$ name: chr \"Penny\"\r\n  ..$ age : num 24\r\n```\r\n\r\nMap each of them to the number of interests.\r\n\r\n\r\n```r\r\nresult <- list.map(devs, length(interest))\r\nstr(result)\r\n```\r\n\r\n```\r\nList of 3\r\n $ p1: int 3\r\n $ p2: int 2\r\n $ p3: int 2\r\n```\r\n\r\n## Using pipeline\r\n\r\nQuery the name of each developer who likes music and uses R, and put the results in a data frame.\r\n\r\n\r\n```r\r\nlibrary(pipeR)\r\ndevs %>>% \r\n  list.filter(\"music\" %in% interest & \"r\" %in% names(lang)) %>>%\r\n  list.select(name,age) %>>%\r\n  list.stack\r\n```\r\n\r\n```\r\n   name age\r\n1   Ken  24\r\n2 James  25\r\n```\r\n\r\nThe example above uses `pipeR`(http://renkun.me/pipeR/) package for pipeline operator `%>>%` that chains commands in a fluent style.\r\n\r\n## Lambda expression\r\n\r\nIn this package, almost all functions that work with expressions accept the following forms of lambda expressions:\r\n\r\n- Implicit lambda expression: `g(x)`\r\n- Univariate lambda expressions: \r\n    * `x ~ g(x)`\r\n    * `x -> g(x)`\r\n    * `f(x) -> g(x)`\r\n- Multivariate lambda expressions:\r\n    * `f(x,i) -> g(x,i)`\r\n    * `f(x,i,name) -> g(x,i,name)`\r\n\r\nwhere `x` refers to the list member itself, `i` denotes the index, `name` denotes the name. If the symbols are not explicitly declared, `.`, `.i` and `.name` will by default be used to represent them, respectively.\r\n\r\n```r\r\nnums <- list(a=c(1,2,3),b=c(2,3,4),c=c(3,4,5))\r\nlist.map(nums, c(min=min(.),max=max(.)))\r\nlist.mapv(nums, x ~ sum(x))\r\nlist.filter(nums, x -> mean(x)>=3)\r\nlist.mapv(nums, f(x,i) -> sum(x,i))\r\n```\r\n\r\n## Vignettes\r\n\r\nThe package also provides detailed vignettes for most functions. \r\n\r\n- [Introduction to rlist](http://cran.r-project.org/web/packages/rlist/vignettes/Introduction.html)\r\n- [List Mapping](http://cran.r-project.org/web/packages/rlist/vignettes/Mapping.html)\r\n- [List Filtering](http://cran.r-project.org/web/packages/rlist/vignettes/Filtering.html)\r\n- [List Sorting](http://cran.r-project.org/web/packages/rlist/vignettes/Sorting.html)\r\n- [List Grouping](http://cran.r-project.org/web/packages/rlist/vignettes/Grouping.html)\r\n- [List Joining](http://cran.r-project.org/web/packages/rlist/vignettes/Joining.html)\r\n- [List Updating](http://cran.r-project.org/web/packages/rlist/vignettes/Updating.html)\r\n- [List Searching](http://cran.r-project.org/web/packages/rlist/vignettes/Searching.html)\r\n- [List Input/Output](http://cran.r-project.org/web/packages/rlist/vignettes/IO.html)\r\n- [Lambda expressions](http://cran.r-project.org/web/packages/rlist/vignettes/Lambda.html)\r\n- [Examples](http://cran.r-project.org/web/packages/rlist/vignettes/Examples.html)\r\n\r\n## Help overview\r\n\r\n```r\r\nhelp(package = rlist)\r\n```\r\n\r\nor view the documentation on [CRAN](http://cran.r-project.org/web/packages/rlist/rlist.pdf)\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}