{"name":"rlist","tagline":"A set of tools for working with list objects","body":"\r\n\r\n# rlist\r\n\r\n[![Build Status](https://travis-ci.org/renkun-ken/rlist.png?branch=master)](https://travis-ci.org/renkun-ken/rlist)\r\n\r\nrlist is a set of tools for working with list objects. It has two main goals:\r\n\r\n- Make it easier to work with list objects used to store data in more flexible structures than data frames.\r\n- Perform a wide range of functions on non-relational data using list constructs.\r\n\r\n*This package may not be stable enough for production purpose. Its functions and implmentations may change overtime and cannot guarantee the backward compatibility at the moment. Please be cautious when you use it in production.*\r\n\r\n## Installation\r\n\r\nInstall from CRAN with\r\n\r\n```r\r\ninstall.packages(\"rlist\")\r\n```\r\n\r\nor install the latest development version from GitHub with\r\n\r\n```r\r\ndevtools::install_github(\"rlist\",\"renkun-ken\")\r\n```\r\n\r\n## Functions\r\n\r\nA wide range of functions are provided to work with list objects.\r\n\r\nSuppose we have a list of developers, each of which has a name, age, some interests and a list of programming language they use and the number of years they have been using them.\r\n\r\n\r\n```r\r\nlibrary(rlist)\r\ndevs <- \r\n  list(\r\n    p1=list(name=\"Ken\",age=24,\r\n      interest=c(\"reading\",\"music\",\"movies\"),\r\n      lang=list(r=2,csharp=4,python=3)),\r\n    p2=list(name=\"James\",age=25,\r\n      interest=c(\"sports\",\"music\"),\r\n      lang=list(r=3,java=2,cpp=5)),\r\n    p3=list(name=\"Penny\",age=24,\r\n      interest=c(\"movies\",\"reading\"),\r\n      lang=list(r=1,cpp=4,python=2)))\r\n```\r\n\r\n### Filtering\r\n\r\nFilter members whose age is no less than 25 by calling `list.filter`.\r\n\r\n\r\n```r\r\nstr(list.filter(devs,age >= 25))\r\n```\r\n\r\n```\r\nList of 1\r\n $ p2:List of 4\r\n  ..$ name    : chr \"James\"\r\n  ..$ age     : num 25\r\n  ..$ interest: chr [1:2] \"sports\" \"music\"\r\n  ..$ lang    :List of 3\r\n  .. ..$ r   : num 3\r\n  .. ..$ java: num 2\r\n  .. ..$ cpp : num 5\r\n```\r\n\r\n### Mapping\r\n\r\nGet the name of each person by calling `list.map` that maps each member by an expression.\r\n\r\n\r\n```r\r\nlist.map(devs, name)\r\n```\r\n\r\n```\r\n$p1\r\n[1] \"Ken\"\r\n\r\n$p2\r\n[1] \"James\"\r\n\r\n$p3\r\n[1] \"Penny\"\r\n```\r\n\r\nGet the programming language each person has been using for the longest time by calling `list.map`.\r\n\r\n\r\n```r\r\nlist.map(devs, sort(unlist(lang),decreasing = T)[1])\r\n```\r\n\r\n```\r\n$p1\r\ncsharp \r\n     4 \r\n\r\n$p2\r\ncpp \r\n  5 \r\n\r\n$p3\r\ncpp \r\n  4 \r\n```\r\n\r\n### Selecting\r\n\r\nSelect the name and age of each member by calling `list.select`.\r\n\r\n\r\n```r\r\nstr(list.select(devs,name,age))\r\n```\r\n\r\n```\r\nList of 3\r\n $ p1:List of 2\r\n  ..$ name: chr \"Ken\"\r\n  ..$ age : num 24\r\n $ p2:List of 2\r\n  ..$ name: chr \"James\"\r\n  ..$ age : num 25\r\n $ p3:List of 2\r\n  ..$ name: chr \"Penny\"\r\n  ..$ age : num 24\r\n```\r\n\r\nSelect the name and evaluate the range of the number of years using programming languages.\r\n\r\n\r\n```r\r\nstr(list.select(devs,name,score.range=range(unlist(lang))))\r\n```\r\n\r\n```\r\nList of 3\r\n $ p1:List of 2\r\n  ..$ name       : chr \"Ken\"\r\n  ..$ score.range: num [1:2] 2 4\r\n $ p2:List of 2\r\n  ..$ name       : chr \"James\"\r\n  ..$ score.range: num [1:2] 2 5\r\n $ p3:List of 2\r\n  ..$ name       : chr \"Penny\"\r\n  ..$ score.range: num [1:2] 1 4\r\n```\r\n\r\n### Grouping\r\n\r\nBuild a list that contains sublists each represents an age group by calling `list.group`.\r\n\r\n\r\n```r\r\nstr(list.group(devs,age))\r\n```\r\n\r\n```\r\nList of 2\r\n $ 24:List of 2\r\n  ..$ p1:List of 4\r\n  .. ..$ name    : chr \"Ken\"\r\n  .. ..$ age     : num 24\r\n  .. ..$ interest: chr [1:3] \"reading\" \"music\" \"movies\"\r\n  .. ..$ lang    :List of 3\r\n  .. .. ..$ r     : num 2\r\n  .. .. ..$ csharp: num 4\r\n  .. .. ..$ python: num 3\r\n  ..$ p3:List of 4\r\n  .. ..$ name    : chr \"Penny\"\r\n  .. ..$ age     : num 24\r\n  .. ..$ interest: chr [1:2] \"movies\" \"reading\"\r\n  .. ..$ lang    :List of 3\r\n  .. .. ..$ r     : num 1\r\n  .. .. ..$ cpp   : num 4\r\n  .. .. ..$ python: num 2\r\n $ 25:List of 1\r\n  ..$ p2:List of 4\r\n  .. ..$ name    : chr \"James\"\r\n  .. ..$ age     : num 25\r\n  .. ..$ interest: chr [1:2] \"sports\" \"music\"\r\n  .. ..$ lang    :List of 3\r\n  .. .. ..$ r   : num 3\r\n  .. .. ..$ java: num 2\r\n  .. .. ..$ cpp : num 5\r\n```\r\n\r\n### Sorting\r\n\r\nSort the developers by the number of interests in descending order, then by the number of years they have been using R in descending order by calling `list.sort`.\r\n\r\n\r\n```r\r\nsorted <- list.sort(devs,desc(length(interest)),desc(lang$r))\r\nlist.map(sorted,name)\r\n```\r\n\r\n```\r\n$p1\r\n[1] \"Ken\"\r\n\r\n$p2\r\n[1] \"James\"\r\n\r\n$p3\r\n[1] \"Penny\"\r\n```\r\n\r\n### Updating\r\n\r\nUse `list.update` to update the list by removing `age` and `lang` columns and introducing the number of languages each member uses as `nlang`.\r\n\r\n\r\n```r\r\nstr(list.update(devs,age=NULL,lang=NULL,nlang=length(lang)))\r\n```\r\n\r\n```\r\nList of 3\r\n $ p1:List of 3\r\n  ..$ name    : chr \"Ken\"\r\n  ..$ interest: chr [1:3] \"reading\" \"music\" \"movies\"\r\n  ..$ nlang   : int 3\r\n $ p2:List of 3\r\n  ..$ name    : chr \"James\"\r\n  ..$ interest: chr [1:2] \"sports\" \"music\"\r\n  ..$ nlang   : int 3\r\n $ p3:List of 3\r\n  ..$ name    : chr \"Penny\"\r\n  ..$ interest: chr [1:2] \"movies\" \"reading\"\r\n  ..$ nlang   : int 3\r\n```\r\n\r\n### More functions\r\n\r\nMuch more functions are provided than the examples show. Please read the documentation of the package.\r\n\r\n### Working with pipeline\r\n\r\nPipeline operators may hugely improve the readability of the code especially when a chain of commands are executed. [pipeR package](http://renkun.me/pipeR) is recommended to co-work with this package.\r\n\r\nIf we want to know the developers whose age is no more than 24 and create a data frame where they are sorted by the number of years using R in descending order and each row tells us the name, years of using R, and the longest time using a language they know.\r\n\r\n\r\n```r\r\nlibrary(pipeR)\r\ndevs %>>%\r\n  list.filter(age <= 24) %>>%\r\n  list.sort(desc(lang$r)) %>>%\r\n  list.map(data.frame(name=name,r=lang$r,\r\n    longest=max(unlist(lang)))) %>>%\r\n  list.rbind\r\n```\r\n\r\n```\r\n    name r longest\r\np1   Ken 2       4\r\np3 Penny 1       4\r\n```\r\n\r\n### Lambda expression\r\n\r\nMost functions in this package supports lambda expressions like `x ~ f(x)` or `x -> f(x)` where `x` refers to the list member itself. Otherwise, `.` will by default be used to represent it.\r\n\r\n\r\n```r\r\nnums <- list(a=c(1,2,3),b=c(2,3,4),c=c(3,4,5))\r\nnums %>>%\r\n  list.map(data.frame(min=min(.),max=max(.))) %>>%\r\n  list.rbind\r\n```\r\n\r\n```\r\n  min max\r\na   1   3\r\nb   2   4\r\nc   3   5\r\n```\r\n\r\n```r\r\nnums %>>%\r\n  list.map(x ~ sum(x))\r\n```\r\n\r\n```\r\n$a\r\n[1] 6\r\n\r\n$b\r\n[1] 9\r\n\r\n$c\r\n[1] 12\r\n```\r\n\r\n```r\r\nnums %>>%\r\n  list.filter(x -> mean(x)>=3)\r\n```\r\n\r\n```\r\n$b\r\n[1] 2 3 4\r\n\r\n$c\r\n[1] 3 4 5\r\n```\r\n\r\n## Help overview\r\n\r\n```r\r\nhelp(package = rlist)\r\n```\r\n\r\n## License\r\n\r\nThis package is under [MIT License](http://opensource.org/licenses/MIT).\r\n","google":"UA-47159422-1","note":"Don't delete this file! It's used internally to help with page regeneration."}